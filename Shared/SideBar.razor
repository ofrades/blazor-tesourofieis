@inject State State
@inject IStyled Styled
@using Blazorise.Sidebar


<Styled>
	#sidebarmissa{
		top: 0;
		bottom: 0;
		position: fixed;
  		margin-top: 75px;
  		left: 0;
		width: 15%;
  		height: calc(100% - 75px);
  		z-index: 0;
  		transition: all 0.2s;
  		overflow-y: scroll;
	}
</Styled>

<Sidebar @ref="sidebar">
	<SidebarContent>
		<SidebarNavigation>

@if(State.deserializer.Keys == null){
	<span class="spinner-border text-center mt-3"></span>
} else {

@foreach (var day in State.deserializer.Keys){
	State.Calendar = State.deserializer[day];

	@if(State.Calendar.Celebration.Any()){
		@foreach (var item in State.Calendar.Celebration){
			<div class="mt-1 mb-1 sidebar-color-marker-@State.deserializer[day].Celebration.Select(c => c.Colors.FirstOrDefault()).FirstOrDefault() @(State.today == day ? "bg-secondary active" : "")">
			<SidebarItem>
				<NavLink id="@day" To="missa"
						@onclick="(() => State.GetToday(day))">
					<h6 class="text-light">@item.Title</h6>
					<small class="text-danger">@day</small>
					@if (State.Calendar.Commemoration.Any()){
						<small class="text-danger">@State.deserializer[day].Commemoration.Select(c => c.Title).FirstOrDefault()</small>
					}
					@if (State.Calendar.Tempora.Any()){
						<small class="text-danger">@State.deserializer[day].Tempora.Select(c => c.Title).FirstOrDefault()</small>
					}
				</NavLink>
			</SidebarItem>
			</div>
		}
	} else if (State.Calendar.Tempora.Any()){
		@foreach (var item in State.Calendar.Tempora){
			<div class="mt-1 mb-1 sidebar-color-marker-@State.deserializer[day].Commemoration.Select(c => c.Colors.FirstOrDefault()).FirstOrDefault() @(State.today == day ? "bg-secondary active" : "")">
			<SidebarItem>
				<NavLink id="@day" To="missa"
						@onclick="(() => State.GetToday(day))">
					<h6 class="text-light">@item.Title</h6>
					<small class="text-danger">@day</small>
					@if (State.Calendar.Commemoration.Any()){
						<small class="text-danger">@State.deserializer[day].Commemoration.Select(c => c.Title).FirstOrDefault()</small>
					}
				</NavLink>
			</SidebarItem>
			</div>
		}
	} else {
		<div class="mt-1 mb-1 sidebar-color-marker-@State.deserializer[day].Commemoration.Select(c => c.Colors.FirstOrDefault()).FirstOrDefault() @(State.today == day ? "bg-secondary active" : "")">
		<SidebarItem>
			<NavLink id="@day" To="missa"
					@onclick="(() => State.GetToday(day))">
				<h6 class="text-light">Feria</h6>
				<small class="text-danger">@day</small>
			</NavLink>
		</SidebarItem>
		</div>
	}
}
}
		</SidebarNavigation>
	</SidebarContent>
</Sidebar>
@code{
	Sidebar sidebar;
	void ToggleSidebar() {
		sidebar.Toggle();
	}
	protected override void OnInitialized() {
		State.OnChange += StateHasChanged;
	}
	protected override async Task OnAfterRenderAsync(bool firstrender) {
		if (firstrender) {
			await State.Focus();
		}
	}
	public void Dispose() {
		State.OnChange -= StateHasChanged;
	}
}
