@inherits LayoutComponentBase
@inject IStyled Styled
@inject ResizeListener listener
@implements IDisposable
@inject State State

<Styled>
    body {
        background-color: [colors.background-color] !important;
        color: [colors.text-color] !important;
    }
    .card {
        background-color: [colors.background-color] !important;
        color: [colors.text-color] !important;
    }
    .list-group-item {
        background-color: [colors.background-color] !important;
        color: [colors.text-color] !important;
    }
</Styled>

@if (IsSmallMedia) {
    <Navbarbottom />
} else {
    <Navbartop />
}

<div class="main">
    <div class="content">
        @Body
    </div>
</div>

<Footer />

@code{
	BrowserWindowSize browser = new BrowserWindowSize();
	bool IsSmallMedia = false;
	protected override async Task OnInitializedAsync() {
		await State.GetCalendar();
		Styled.SetThemeValue("colors.background-color", "#eee");
		Styled.SetThemeValue("colors.text-color", "#26313c");
		State.OnChange += StateHasChanged;
	}
	protected override void OnAfterRender(bool firstRender) {
		if (firstRender) {
			listener.OnResized += WindowResized;
		}
	}

	void IDisposable.Dispose() {
		listener.OnResized -= WindowResized;
	}

	async void WindowResized(object _, BrowserWindowSize window) {
		browser = window;

		IsSmallMedia = await listener.MatchMedia(Breakpoints.SmallDown);

		StateHasChanged();
	}
}
